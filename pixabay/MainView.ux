<App>
	<JavaScript>
		var Observable = require("FuseJS/Observable")
		var pixabay = require("pixabay")
		
		exports.items = Observable()
		
		var url = pixabay.search + 
			"?key=" + encodeURIComponent(pixabay.key) +
			"&per_page=3" //for testing
			
		fetch( url ).then( function(resp) {
			
			var data = resp.json().then( function(data) {
				data.hits.forEach( function(item) {
					exports.items.add(item)
				})
			}).catch(function(err) {
				console.log( "Data Error: " + err)
			})
		}).catch(function(err) {
			console.log( "Fetch Error: " +  err )
		})
	</JavaScript>
		<Panel ux:Name="TheViewer" Visibility="Hidden" HitTestMode="LocalBoundsAndChildren">
			<SolidColor Color="0,0,0,0" ux:Name="BlockColor"/>

			<Panel Alignment="TopRight" Padding="5" ux:Name="CloseButton" Margin="5">	
				<Translation Vector="1.5,-1.5,0" RelativeTo="Size" ux:Name="TheTrans"/>
				<Rectangle Layer="Background" Fill="1,1,1,0.8" CornerRadius="5"/>
				<Image File="Assets/icon_cancel.png" Color="0,0.1,0.2,1"/>
				<Clicked>
					<Set ViewerVisible.Value="false"/>
				</Clicked>
			</Panel>
			
			<!-- reset transform -->
			<DoubleTapped>
				<Set TheZoomer.Value="1"/>
				<Set ThePanner.Value="0,0"/>
				<Set TheRotater.Value="0"/>
			</DoubleTapped>
			
			<!-- close when it gets small enough -->
			<WhileFloat Value="{ReadProperty TheTransform.ZoomFactor}" LessThan="0.7">
				<!-- the gestures will be active at this time, so we must explicitly cancel them -->
				<CancelInteractions/>
				<Set ViewerVisible.Value="false"/>
			</WhileFloat>
			
			<WhileTrue ux:Name="ViewerVisible">
				<Change BlockColor.Color="0,0.1,0.2,0.8" Duration="0.2" Easing="QuadraticInOut"/>
				<Change TheViewer.Visibility="Visible"/>
				<Change TheTrans.Vector="0" Duration="0.3" Easing="QuadraticInOut"/>
				<PulseForward Target="ZoomTo" When="Backward"/>
				
				<!-- reset transform so animation gets close to target size -->
				<Set TheZoomer.Value="1" When="Backward"/>
				<Set ThePanner.Value="0,0" When="Backward"/>
				<Set TheRotater.Value="0" When="Backward"/>
			</WhileTrue>
			
			<ZoomGesture Target="TheTransform" Minimum="1" Maximum="3" ux:Name="TheZoom"/>
			<Attractor Target="TheTransform.ZoomFactor" ux:Name="TheZoomer" TimeMultiplier="2"/>
			<!--
				What has happend to SimulationType?
			<Attractor Target="TheTransform.ZoomFactor" ux:Name="TheZoomer"
				SimulationType="ElasticForceNormalized" TimeMultiplier="2"/>-->
				
			<RotateGesture Target="TheTransform" ux:Name="TheRotate" StepDegrees="30"/>
			<Attractor Target="TheTransform.Rotation" ux:Name="TheRotater" TimeMultiplier="0.5"/>
			<!--
				What has happend to SimulationType?
			<Attractor Target="TheTransform.Rotation" ux:Name="TheRotater"
				SimulationType="ElasticForceAngular" TimeMultiplier="0.5"/>-->
			
			<PanGesture Target="TheTransform" Constraint="TheViewerImage" ux:Name="ThePan"/>
			<Attractor Target="TheTransform.Translation" ux:Name="ThePanner" />
			<!--
				What has happend to SimulationType?
			<Attractor Target="TheTransform.Translation" ux:Name="ThePanner"
				SimulationType="ElasticForcePoints"/>-->
				
			<!-- the user might start interacting while the attractors are still running, stop that -->
			<WhileInteracting>
				<Change Target="TheZoomer.IsEnabled" Value="false"/>
				<Change Target="TheRotater.IsEnabled" Value="false"/>
				<Change Target="ThePanner.IsEnabled" Value="false"/>
			</WhileInteracting>
			
			<!-- A wrapping panel to ensure the InteractiveTransform and layout transforms don't
				interfere with each other (it is not supported to have them both on the same node) -->
			<Panel>
				<Image ux:Name="TheViewerImage">
					<InteractiveTransform ux:Name="TheTransform"/>
					<WhileLoading>
						<Change ThePreviewImage.Visibility="Visible"/>
					</WhileLoading>
				</Image>
				<Image ux:Name="ThePreviewImage" Visibility="Hidden"/>
				<Timeline ux:Name="ZoomTo">
					<Move RelativeTo="PositionOffset" Vector="1" Duration="0.3" ux:Name="ZoomToPos"
						Easing="QuadraticInOut"/>
					<Resize RelativeTo="Size" Vector="1" Duration="0.3" ux:Name="ZoomToSize"
						Easing="QuadraticInOut"/>
				</Timeline>
			</Panel>
		</Panel>
	
	<ScrollView AllowedScrollDirections="Horizontal" ux:Name="TheScroll">
		<Panel Margin="7">
			<ColumnLayout ColumnSize="100" Orientation="Horizontal" Sizing="Fill"
				ColumnSpacing="7" ItemSpacing="7" ux:Name="TheColumns"/>
				
			<Each Items="{items}">
				<Panel>
					<Image Url="{previewURL}" ux:Name="selfImage"/>
					<Tapped>
						<Set Target="TheViewerImage.Url" Value="{webformatURL}"/>
						<Set Target="ThePreviewImage.Url" Value="{previewURL}"/>
						<Set ViewerVisible.Value="true"/>
						
						<Set TheTransform.ZoomFactor="1"/>
						<Set TheTransform.Rotation="0"/>
						<Set TheTransform.Translation="0"/>
						
						<Set ZoomToPos.RelativeNode="selfImage"/>
						<Set ZoomToSize.RelativeNode="selfImage"/>
						<PulseBackward Target="ZoomTo"/>
					</Tapped>
				</Panel>
			</Each>
		</Panel>
		
		<WhileWindowPortrait>
			<Change TheScroll.AllowedScrollDirections="Vertical"/>
			<Change TheColumns.Orientation="Vertical"/>
		</WhileWindowPortrait>
	</ScrollView>
</App>